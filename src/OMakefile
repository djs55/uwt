.DEFAULT: lib
.PHONY: clean all distclean doc lib minimal lwtlib remove_uv_include

CC= $(OCAMLC_CC)

if $(not $(equal $(INTERNAL_LIBUV),$(EMPTY)))
	$(basename $(INTERNAL_LIBUV)):
		ln-or-cp $(INTERNAL_LIBUV) $(basename $(INTERNAL_LIBUV))

if $(equal $(OSTYPE),Win32)
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			sh.exe autoreconf -fi
		else
			touch configure config.h.in
	config.h config.inc: config.h.in configure config.inc.in $(basename $(INTERNAL_LIBUV))
		sh.exe configure CC="$(OCAMLC_CC)" CFLAGS="$(OCAMLC_CC_CFLAGS) $(CFLAGS) $(CFLAGS_LIBUV)"  LDFLAGS="$(LDFLAGS) $(LDFLAGS_LIBUV)"
else
	configure config.h.in: configure.ac
		if $(or $(not $(file-exists configure)),$(not $(file-exists config.h.in)))
			autoreconf -fi
		else
			touch configure config.h.in 
	config.h config.inc: config.h.in configure config.inc.in $(basename $(INTERNAL_LIBUV))
		./configure CC="$(OCAMLC_CC)" CFLAGS="$(OCAMLC_CC_CFLAGS) $(CFLAGS) $(CFLAGS_LIBUV)"  LDFLAGS="$(LDFLAGS) $(LDFLAGS_LIBUV)"

clean::
	rm -f config.log config.status

distclean::
	rm -f config.h *~ configure config.inc config.h.in
	rm -rf autom4te.cache

section
	.SCANNER: scan-c-%: config.h
	CFILES= emap_gen
	CFLAGS= $(OCAMLC_CC_CFLAGS) $(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+= $(LDFLAGS_LIBUV)
	Repeat_ctargets($(CFILES))
	T=$(CProgram emap_gen, $(CFILES))
	clean::
		rm -f emap_gen$(EXE)
	distclean::
		rm -f error.ml error_val.ml error_val.mli map_error.h uwt-error.h
	uwt-error.h error.ml error_val.ml map_error.h: emap_gen$(EXE)
		if $(or $(not $(file-exists error.ml)),$(or $(not $(file-exists error_val.ml)), $(not $(file-exists map_error.h))))
			./emap_gen$(EXE)
		else
			touch error.ml error_val.ml map_error.h

OCAMLPACKS+= bigarray unix
section
	.SCANNER: scan-c-%: map_error.h config.h
	.SCANNER: scan-ocaml-%: error.ml error_val.ml
	MLFILES= uwt_base uwt_bytes
	#CFILES= uwt_stubs_common uwt_stubs_base uwt_stubs_handle uwt_stubs_timer uwt_stubs_stream uwt_stubs_tty uwt_stubs_pipe uwt_stubs_tcp uwt_stubs_udp uwt_stubs_signal uwt_stubs_poll uwt_stubs_fs_event uwt_stubs_fs_poll uwt_stubs_async uwt_stubs_misc uwt_stubs_dns uwt_stubs_process uwt_stubs_fs uwt_stubs_conv uwt_stubs_worker uwt_bytes_stubs uwt_stubs_unix
	CFILES= uwt_stubs uwt_bytes_stubs uwt_stubs_unix
	CFLAGS=$(CFLAGS) $(CFLAGS_LIBUV)
	LDFLAGS+=$(LDFLAGS_LIBUV)
	OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
	Repeat_targets($(MLFILES))
	UWT_BASE=$(MixedLibrary uwt-base, $(MLFILES), $(CFILES))
	minimal:: $(UWT_BASE)
	export UWT_BASE

section
	.SCANNER: scan-ocaml-%: config.inc
	MLFILES= uv_fs_sync
	OCAML_LIBS+= uwt-base
	OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
	Repeat_targets($(MLFILES))
	UV_SYNC=$(MOCamlLibrary uv-fs-sync, $(MLFILES))
	minimal:: $(UV_SYNC)
	export UV_SYNC

lwtlib:: minimal

section
	.SCANNER: scan-ocaml-%: config.inc
	OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
	OCAMLPACKS+= lwt
	MLFILES= uwt
	OCAML_LIBS+= uwt-base
	Repeat_targets($(MLFILES))
	UWT_CORE=$(MOCamlLibrary uwt, $(MLFILES))
	lwtlib:: $(UWT_CORE)
	export UWT_CORE

section
	.SCANNER: scan-ocaml-%: config.inc
	OCAMLPACKS+= lwt
	OCAML_LIBS+= uwt-base uwt
	FILES= uwt_throttle uwt_timeout
	CPPOFILES= uwt_io uwt_process
	Repeat_targets($(FILES))
	section
		OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
		Repeat_targets($(CPPOFILES))
	UWT_EXT=$(MOCamlLibrary uwt-ext, $(FILES) $(CPPOFILES))
	lwtlib:: $(UWT_EXT)
	export UWT_EXT

section
	OCAMLPACKS+= lwt
	OCAML_LIBS+= uwt-base uwt
	OCAMLFLAGS+= -thread
	FILES= uwt_preemptive
	Repeat_targets($(FILES))
	UWT_PREEMPTIVE=$(MOCamlLibrary uwt-preemptive,$(FILES))
	lwtlib:: $(UWT_PREEMPTIVE)
	export UWT_PREEMPTIVE

section
	OCAMLPACKS+= lwt
	OCAML_LIBS+= uwt-base uwt uwt-ext
	FILES= uwt_compat
	OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
	Repeat_targets($(FILES))
	UWT_COMPAT=$(MOCamlLibrary uwt-compat,$(FILES))
	lwtlib:: $(UWT_COMPAT)
	export UWT_COMPAT

section
	OCAMLPACKS+= lwt
	OCAMLDOCFLAGS=-intro ../dist/doc.txt -t $"Uwt - OCaml bindings for libuv"
	OCAMLFINDFLAGS+= -pp "cppo -V OCAML:$(OCAMLC_VERSION)"
	x=$(CreateDoc uwt,html,$(UWT_BASE) $(UV_SYNC) $(UWT_CORE) $(UWT_COMPAT) $(UWT_EXT) $(UWT_PREEMPTIVE))
	doc::
		mkdir(-m 0755 -p html)
		cp ../dist/style.css html/style.css

ConfReplace(META)

remove_uv_include::
	section
		x=$(shell $(OCAMLFIND) printconf destdir)
		if $(not $(equal $(x), $(EMPTY)))
			rm -rf $(x)/uwt/uv

uninstall:: remove_uv_include
install:: remove_uv_include

section
	x=$(UWT_BASE) $(UV_SYNC) uwt-worker.h uwt-error.h
	y=$(UWT_CORE) $(UWT_COMPAT) $(UWT_EXT) $(UWT_PREEMPTIVE)
	if $(not $(equal $(INTERNAL_LIBUV),$(EMPTY)))
		export x
		x+=libuv$(EXT_LIB) $(glob ../libuv/include/*.h)
	if $(equal $(HAVE_LWT), true)
		Install_helper($(PROJNAME),$(x) $(y),$(EMPTY))
	else
		Install_helper($(PROJNAME),$(x),$(EMPTY))

if $(not $(equal $(INTERNAL_LIBUV),$(EMPTY)))
	install::
		section
			x=$(shell $(OCAMLFIND) printconf destdir)
			if $(not $(equal $(x), $(EMPTY)))
				mkdir(-m 0755 -p $(x)/uwt/uv)
				cp $(glob ../libuv/include/uv/*.h) $(x)/uwt/uv

if $(equal $(INTERNAL_LIBUV),$(EMPTY))
	clean::
		clean-helper()
else
	clean::
		clean-helper-keep($(basename $(INTERNAL_LIBUV)))

distclean:: clean
	clean-helper()
	rm -f *~ $(basename $(INTERNAL_LIBUV))

if $(equal $(HAVE_LWT), true)
	lib:: lwtlib
else
	lib:: minimal

all:: lib
